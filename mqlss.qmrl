GateRealization[
    routed_gates = Pauli
    name='MQLSSGate'
    data= (tree : Vec<Location>)
    realize_gate = if ((Gate.gate_type) == PauliRot{.., ..}) 
    then
        map(|x| -> GateRealization{tree = x},
            steiner_trees(
                arch, 
                (map(|x| -> horizontal_neighbors(Step.map[x], Arch.width, Arch.height)), Gate.x_indices).append(
                (map(|x| -> vertical_neighbors(Step.map[x], Arch.width, Arch.height), Gate.z_indices)).append(
                (map(|x| -> vertical_neighbors(Step.map[x], Arch.width, Arch.height), Gate.y_indices)).append(
                 map(|x| -> horizontal_neighbor(Step.map[x], Arch.width, Arch.height), Gate.y_indices)
                ))), 
                ((values(Step.map())).extend(Arch.magic_state_qubits())).extend(fold(Vec(), |x, acc| -> acc.extend(x), map(|x| -> x.implementation.(path()), Step.implemented_gates())))
                )
        )
    else 
        map(|x| -> GateRealization{tree = x},
            steiner_trees(
                arch, 
                fold(Vec(), |x, acc| -> acc.extend(x), map(|x| -> horizontal_neighbors(x, arch.width), Arch.magic_state_qubits())).extend( 
                (map(|x| -> horizontal_neighbors(Step.map[x], Arch.width, Arch.height)), Gate.x_indices).extend(
                (map(|x| -> vertical_neighbors(Step.map[x], Arch.width, Arch.height), Gate.z_indices)).extend(
                (map(|x| -> vertical_neighbors(Step.map[x], Arch.width, Arch.height), Gate.y_indices)).extend(
                 map(|x| -> horizontal_neighbor(Step.map[x], Arch.width, Arch.height), Gate.y_indices)
                )))), 
                ((values(Step.map())).extend(Arch.magic_state_qubits())).extend(fold(Vec(), |x, acc| -> acc.extend(x), map(|x| -> x.implementation.(path()), Step.implemented_gates())))
                )
        )
        
 ]

Transition[
    name = 'Id'
    data = (na : Location)
    get_transitions = (Vec()).push(Transition{na=Location(0)})
    apply = identity_application(step)
    cost = 0.0

]

Architecture[
    name = 'MQLSSArch'
    data = (magic_state_qubits : Vec<Location>, alg_qubits : Vec<Location>, width : Int, height : Int)
    get_locations = Arch.alg_qubits()
]

Step[
    cost = 1.0
]