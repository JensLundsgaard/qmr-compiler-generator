GateRealization[
    routed_gates = CX, T
    name='ILQGate'
    data= (path : Vec<Location>)
    realize_gate = map(|x| -> GateRealization{path = x}, 
        if (Gate.gate_type()) == CX 
            then 
                if ((Step.map[Gate.qubits[0]]) / Arch.stack_size) == ((Step.map[Gate.qubits[1]]) / Arch.stack_size)
                    then 
                        all_paths(arch, (Vec()).push(Step.map[Gate.qubits[0]]), (Vec()).push(Step.map[Gate.qubits[1]]), Vec())
                    else 
                        all_paths(arch, vertical_neighbors(Step.map[Gate.qubits[0]], Arch.width, Arch.height), 
                        horizontal_neighbors(Step.map[Gate.qubits[1]], arch.width), 
                        ((values(Step.map())).extend(Arch.magic_state_qubits()))
                        .extend(fold(Vec(), |x, acc| -> acc.extend(x), 
                        map(|x| -> x.implementation.(path()), Step.implemented_gates()))))
             else   
                all_paths(arch, 
                          vertical_neighbors(Step.map[Gate.qubits[0]], Arch.width, Arch.height), 
                          fold(Vec(), |x, acc| -> acc.extend(x), 
                          map(|x| -> horizontal_neighbors(x, arch.width), Arch.magic_state_qubits())), 
                          ((values(Step.map()))
                          .extend(Arch.magic_state_qubits()))
                          .extend(fold(Vec(), |x, acc| -> acc.extend(x),
                           map(|x| -> x.implementation.(path()), Step.implemented_gates())))))
 ]

Transition[
    name = 'Id'
    data = (na : Location)
    get_transitions = (Vec()).push(Transition{na=Location(0)})
    apply = identity_application(step)
    cost = 0.0

]

Architecture[
    name = 'ILQArch'
    data = (magic_state_qubits : Vec<Location>, alg_qubits : Vec<Location>, width : Int, height : Int, stack_size : Int)
    get_locations = Arch.alg_qubits()
]

Step[
    cost = 1.0
]